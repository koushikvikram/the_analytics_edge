# to do this, we need to limit the x-axis to go from 0 to say, 100 mg
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100))
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks = 100) # we also need to specify
# the number of breaks
# we only see 5 cells, but we were expecting 100 cells. R actually divided the original interval ie. 0 to 2000 into 100 cells, then
# 2000 divided by 100, each cell would be 20mg long.
# But, we want to divide the interval 0 to 100 into 100 cells, each of length 1 mg.
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks = 2000)
# we see that more than 5000 of them have less than 1mg of Vitamin C
# Box plot
boxplot(USDA$Sugar, main="Boxplot of Sugar Levels", ylab="Sugar(g)")
# we see that the average is around 5g, but we have a lot of outliers with extremely high values of sugar.
######################################## Adding variables to our data frame
# Let's say we want to add a variable to our USDA data frame that takes value 1 if the food has higher sodium than average,
# and 0 if the food has lower sodium than average.
# Step 1: Let's check if the first food in the dataset has a higher amount of sodium compared to the average.
USDA$Sodium[1] > mean(USDA$Sodium, na.rm=TRUE) # TRUE
# let's also check for the 50th food.
USDA$Sodium[50] > mean(USDA$Sodium, na.rm=TRUE) # FALSE
# Step 2: We can check this for all elements in the vector
USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE)
# let's save this to a vector called HighSodium
HighSodium = USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE)
# let's investigate the structure of the vector
str(HighSodium) # we see that the datatype is logi ie. logicals
# Step 3: We wanted values 1s and 0s instead of TRUE and FALSE. Let's convert logic to numeric
HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE))
str(HighSodium)
# Step 4: Let's add this variable to the data frame
USDA$HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE))
str(USDA)
# Step 5: Let's do the same for HighProtein, HighCarbs, HighFat
USDA$HighProtein = as.numeric(USDA$Protein > mean(USDA$Protein, na.rm=TRUE))
USDA$HighCarbs = as.numeric(USDA$Carbohydrate > mean(USDA$Carbohydrate, na.rm=TRUE))
USDA$HighFat = as.numeric(USDA$TotalFat > mean(USDA$TotalFat, na.rm=TRUE))
str(USDA)
######################################## Summary Tables
# How can we find the relationships between these variables, and also the original variables that we had in the USDA data frame?
# - table and tapply functions
# To figure out how many foods have higher sodium level than average, we want to look at the HighSodium variable and count the foods that
# have values 1
table(USDA$HighSodium)
# now let's see how many foods have both high sodium and high fat
table(USDA$HighSodium, USDA$HighFat) # here, the rows belong to 1st input ie. HighSodium and columns belong to 2nd input ie. HighFat
# so, there are 1355 foods with low sodium and high fat, etc.
# let's compute the average amount of iron sorted by high and low protein
tapply(USDA$Iron, USDA$HighProtein, mean, na.rm=TRUE)
tapply(USDA$VitaminC, USDA$HighCarbs, max, na.rm=TRUE)
tapply(USDA$VitaminC, USDA$HighCarbs, summary, na.rm=TRUE)
# Recitation 1 - Undertanding Food: Nutritional Education with Data
# Use Ctrl+Shift+C for multi line comment
# Nutritional Facts about food -
#   Good nutrition is an important part of leading a healthy lifestyle
#   Malnutrition can lead to obesity
#
# Obesity -
#   More than 35% of US adults are obese -
#     Obesity-related conditions are some of the leading causes of preventable death (heart disease, stroke, type II diabetes)
#
#   Worldwide, obesity has nearly doubled since 1980
#
#   65% of the world's population lives in countries where overweight and obesity kills more people than underweight
# Nutrition -
#   Good nutrition is essential for a person's overall health and well being, and is now more important than ever
#
#   Hundreds of nutrition and weight-loss applications -
#     15% of adults with cell phones use health applications on their devices
#
#   These apps are powered by the USDA Food Database
# USDA Food Database -
#   The United States Department of Agriculture distributes a database of nutritional information for over 7,000 different food items
#
# Used as the foundation for most food and nutrient databases in the US
#
# Includes information about all nutrients -
#   Calories, carbs, proteins, fat, sodium, ...
#######################################################################################################################################
######################################## Working with data
# Step 1: Read info from csv file and save it in a data frame
USDA =  read.csv("USDA.csv")
# Step 2: Let's learn about our data
str(USDA)
# Step 3: Let's obtain high-level statistical information about our dataset
summary(USDA)
# What's startling is that the max amount of Sodium is 38,758.0 mg, given that the daily recommended max is only 2,300 mg
######################################## Data Analysis
# Let's investigate which food has the highest amount of Sodium
USDA$Sodium # gives the list of sodium levels
which.max(USDA$Sodium) # gives the index of the food with highest sodium level, ie. 265
names(USDA) # gives the names of all variables in the USDA dataframe
# Let's find the food with highest sodium level
USDA$Description[265] # returns SALT, TABLE
# Having 38,758 mg of sodium in 100g of table salt makes sense, but none of us would eat 100g of table salt in one sitting
# It would be more interesting to find out which foods contain more than 10,000 mg of sodium
HighSodium = subset(USDA, Sodium>10000)
nrow(HighSodium) # to find out how many foods have sodium > 10000
HighSodium$Description # gives the names of foods with > 10000 mg of sodium in 100g of food
# our assumption was that caviar would appear in HighSodium, but it doesn't
# Let's get the index of caviar
match("CAVIAR", USDA$Description) # returns 4154
# Let's find the level of sodium in Caviar
USDA$Sodium[4154] # returns 1500
# Combining the above two steps into one
USDA$Sodium[match("CAVIAR", USDA$Description)]
# A good way to figure out how big a value this is, is by comparing it to the mean and standard deviation of sodium levels across
# the data set
summary(USDA$Sodium)
sd(USDA$Sodium, na.rm=TRUE) # to find standard deviation
# mean + sd = 322.1 + 1045.417 = 1367.517
# this is still smaller than the amount of sodium in 100g of caviar.
# so, caviar is pretty rich in sodium compared to most of the foods in our data set
######################################## Data Visualization
# Visualization is a crutial step for initial data exploration
# It helps us discern relationships, patterns and outliers.
# Let's create a scatterplot with Protein on the x-axis and Fat on the y-axis
plot(USDA$Protein, USDA$TotalFat)
# the plot has a very interesting triangular shape.
# it looks like the foods that are higher in protein are lower in fat and vice-versa
# Let's improve the aesthetics of the graph by labeling the x and y axes, giving it a title and changing the color
plot(USDA$Protein, USDA$TotalFat, xlab="Protein", ylab="Fat", main="Protein vs Fat", col="red")
# Plotting histograms - another way to visualize data - hist() - takes in just one variable as input as y-axis should have frequencies
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels")
# Let's zoom into the histogram a little more
# to do this, we need to limit the x-axis to go from 0 to say, 100 mg
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100))
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks = 100) # we also need to specify
# the number of breaks
# we only see 5 cells, but we were expecting 100 cells. R actually divided the original interval ie. 0 to 2000 into 100 cells, then
# 2000 divided by 100, each cell would be 20mg long.
# But, we want to divide the interval 0 to 100 into 100 cells, each of length 1 mg.
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks = 2000)
# we see that more than 5000 of them have less than 1mg of Vitamin C
# Box plot
boxplot(USDA$Sugar, main="Boxplot of Sugar Levels", ylab="Sugar(g)")
# we see that the average is around 5g, but we have a lot of outliers with extremely high values of sugar.
######################################## Adding variables to our data frame
# Let's say we want to add a variable to our USDA data frame that takes value 1 if the food has higher sodium than average,
# and 0 if the food has lower sodium than average.
# Step 1: Let's check if the first food in the dataset has a higher amount of sodium compared to the average.
USDA$Sodium[1] > mean(USDA$Sodium, na.rm=TRUE) # TRUE
# let's also check for the 50th food.
USDA$Sodium[50] > mean(USDA$Sodium, na.rm=TRUE) # FALSE
# Step 2: We can check this for all elements in the vector
USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE)
# let's save this to a vector called HighSodium
HighSodium = USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE)
# let's investigate the structure of the vector
str(HighSodium) # we see that the datatype is logi ie. logicals
# Step 3: We wanted values 1s and 0s instead of TRUE and FALSE. Let's convert logic to numeric
HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE))
str(HighSodium)
# Step 4: Let's add this variable to the data frame
USDA$HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE))
str(USDA)
# Step 5: Let's do the same for HighProtein, HighCarbs, HighFat
USDA$HighProtein = as.numeric(USDA$Protein > mean(USDA$Protein, na.rm=TRUE))
USDA$HighCarbs = as.numeric(USDA$Carbohydrate > mean(USDA$Carbohydrate, na.rm=TRUE))
USDA$HighFat = as.numeric(USDA$TotalFat > mean(USDA$TotalFat, na.rm=TRUE))
str(USDA)
######################################## Summary Tables
# How can we find the relationships between these variables, and also the original variables that we had in the USDA data frame?
# - table and tapply functions
# To figure out how many foods have higher sodium level than average, we want to look at the HighSodium variable and count the foods that
# have values 1
table(USDA$HighSodium)
# now let's see how many foods have both high sodium and high fat
table(USDA$HighSodium, USDA$HighFat) # here, the rows belong to 1st input ie. HighSodium and columns belong to 2nd input ie. HighFat
# so, there are 1355 foods with low sodium and high fat, etc.
table(USDA$HighSodium, USDA$HighFat, USDA$HighCarbs)
# let's compute the average amount of iron sorted by high and low protein
tapply(USDA$Iron, USDA$HighProtein, mean, na.rm=TRUE)
# so, the foods with high protein, on average, have 3.197294 mg of iron and foods with low protein, on average have 2.558945 mg of iron
# let's compute the maximum level of vitamin C in foods with high and low carbs
tapply(USDA$VitaminC, USDA$HighCarbs, max, na.rm=TRUE)
# we see that The maximum vitamin C level, which is 2,400 milligrams is actually present in a food that is high in carbs.
# is it true that foods that are high in carbs have generally high vitamin C content?
# to examine that, let's use the summary function with tapply
tapply(USDA$VitaminC, USDA$HighCarbs, summary, na.rm=TRUE)
# looking at their means, it does look like a general trend. Foods with high carb content are on average richer in Vitamin C
# compared to foods with low carb content
USDA = read.csv("USDA.csv")
names(USDA)
head(USDA)
str(USDA)
summary(USDA)
which.max(USDA$Calories)
USDA$Description[289]
which.min(USDA$Calories)
USDA$Description[265]
which.min(USDA$Protein)
USDA$Description[265]
which.max(USDA$Protein)
USDA$Description[4661]
max(USDA$Protein)
max(USDA$Protein, na.rm=TRUE)
summary(USDA$TotalFat)
USDA$Description[which.min(USDA$TotalFat)]
USDA$Description[which.max(USDA$TotalFat)]
summary(USDA$Carbohydrate)
USDA$Description[which.min(USDA$Carbohydrate)]
USDA$Description[which.max(USDA$Carbohydrate)]
summary(USDA$Sodium)
boxplot(USDA$Sodium)
boxplot(USDA$Carbohydrate)
boxplot(USDA$TotalFat)
boxplot(USDA$Protein)
boxplot(USDA$Calories)
USDA$Description(which.max(USDA$Sodium))
USDA$Description[which.max(USDA$Sodium)]
max(USDA$Sodium)
max(USDA$Sodium, na.rm=TRUE)
HighSodium = subset(USDA, Sodium>10000)
nrow(HighSodium)
HighSodium$Description
match("CAVIAR",USDA$Description)
USDA$Sodium[4154]
summary((USDA$Sodium))
sd(USDA$Sodium)
sd(USDA$Sodium, na.ram=TRUE)
sd(USDA$Sodium, na.rm=TRUE)
# Recitation 1 - Undertanding Food: Nutritional Education with Data
# Use Ctrl+Shift+C for multi line comment
# Nutritional Facts about food -
#   Good nutrition is an important part of leading a healthy lifestyle
#   Malnutrition can lead to obesity
#
# Obesity -
#   More than 35% of US adults are obese -
#     Obesity-related conditions are some of the leading causes of preventable death (heart disease, stroke, type II diabetes)
#
#   Worldwide, obesity has nearly doubled since 1980
#
#   65% of the world's population lives in countries where overweight and obesity kills more people than underweight
# Nutrition -
#   Good nutrition is essential for a person's overall health and well being, and is now more important than ever
#
#   Hundreds of nutrition and weight-loss applications -
#     15% of adults with cell phones use health applications on their devices
#
#   These apps are powered by the USDA Food Database
# USDA Food Database -
#   The United States Department of Agriculture distributes a database of nutritional information for over 7,000 different food items
#
# Used as the foundation for most food and nutrient databases in the US
#
# Includes information about all nutrients -
#   Calories, carbs, proteins, fat, sodium, ...
#######################################################################################################################################
######################################## Working with data
# Step 1: Read info from csv file and save it in a data frame
USDA =  read.csv("USDA.csv")
# Step 2: Let's learn about our data
str(USDA)
# Step 3: Let's obtain high-level statistical information about our dataset
summary(USDA)
# What's startling is that the max amount of Sodium is 38,758.0 mg, given that the daily recommended max is only 2,300 mg
######################################## Data Analysis
# Let's investigate which food has the highest amount of Sodium
USDA$Sodium # gives the list of sodium levels
which.max(USDA$Sodium) # gives the index of the food with highest sodium level, ie. 265
names(USDA) # gives the names of all variables in the USDA dataframe
# Let's find the food with highest sodium level
USDA$Description[265] # returns SALT, TABLE
# Having 38,758 mg of sodium in 100g of table salt makes sense, but none of us would eat 100g of table salt in one sitting
# It would be more interesting to find out which foods contain more than 10,000 mg of sodium
HighSodium = subset(USDA, Sodium>10000)
nrow(HighSodium) # to find out how many foods have sodium > 10000
HighSodium$Description # gives the names of foods with > 10000 mg of sodium in 100g of food
# our assumption was that caviar would appear in HighSodium, but it doesn't
# Let's get the index of caviar
match("CAVIAR", USDA$Description) # returns 4154
# Let's find the level of sodium in Caviar
USDA$Sodium[4154] # returns 1500
# Combining the above two steps into one
USDA$Sodium[match("CAVIAR", USDA$Description)]
# A good way to figure out how big a value this is, is by comparing it to the mean and standard deviation of sodium levels across
# the data set
summary(USDA$Sodium)
sd(USDA$Sodium, na.rm=TRUE) # to find standard deviation
# mean + sd = 322.1 + 1045.417 = 1367.517
# this is still smaller than the amount of sodium in 100g of caviar.
# so, caviar is pretty rich in sodium compared to most of the foods in our data set
plot(USDA$Protein, USDA$TotalFat)
plot(USDA$Protein, USDA$TotalFat)
plot(USDA$Protein, USDA$TotalFat, xlab="Protein", ylab="Fat", main="Protein vs Fat", col="red")
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels")
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100))
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks = 100) # we also need to specify
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks = 2000)
USDA =  read.csv("USDA.csv")
str(USDA)
names(USDA)
head(USDA)
str(USDA)
summary(USDA)
summary(USDA$Sodium)
USDA$Description[which.max(USDA$Sodium)]
USDA$Description[USDA$Sodium > 10000]
USDA$Description([USDA$Sodium > 10000], na.rm=TRUE)
USDA$Description[USDA$Sodium > 10000]
USDA$Sodium > 10000
HighSodium = subset(USDA, Sodium>10000)
HighSodium$Description
nrow(HighSodium)
HighSodium$Description
USDA$Sodium[match("CAVIAR", USDA$Description)]
mean(USDA$Sodium)
mean(USDA$Sodium, na.rm=TRUE)
sd(USDA$Sodium, na.rm=TRUE)
plot(USDA$Protein, USDA$TotalFat)
plot(USDA$Protein, USDA$TotalFat, xlab="Protein", ylab="Fat", main="Protein vs Fat", col="red")
hist(USDA$VitaminC)
hist(WHO$CellularSubscribers)
sqrt2 = sqrt(2) # assign the value of sqrt(2) to the variable sqrt2
hoursYear <- 365*24 # calculate the number of hours in a year and assign it to the variable hoursYear
######### vectors and data frames
# vectors
# you can create vectors in R using the combine function
# a vector is a series of numbers or characters stored as the same object
# you shouldn't combine characters and numbers in a vector - R will convert the numbers to characters
# R only allows one data type in each vector
c(2,3,5,8,13) # combine function
Country = c("Brazil", "China", "India", "Switzerland", "USA") # a vector of characters
LifeExpectancy = c(74, 76, 65, 83, 79) # a vector of numbers
Country[1] # returns the 1st element of Country vector
LifeExpectancy[3] # returns the 3rd element of LifeExpectancy vector
seq(0, 100, 2) # creates a sequence of numbers from 0 to 100 in increments of two
# seq can be useful if you want to create a unique identifier for observations
# dataframes - important data structure
# many algorithms in R require all of the data to be in a single object like a data frame
CountryData = data.frame(Country, LifeExpectancy) # we can combine the Country and LifeExpectancy vectors to create the CountryData dataframe
# adding another variable to our data frame
CountryData$Population = c(199000, 1390000, 1240000, 7997, 318000)
# adding new observations for Australia and Greece
Country = c("Australia", "Greece")
LifeExpectancy = c(82, 81)
Population = c(23050, 11125)
NewCountryData = data.frame(Country, LifeExpectancy, Population)
AllCountryData = rbind(CountryData, NewCountryData) # combines data frames by stacking the rows
#######################################################################################################################################
######### Loading Data Files
# navigate to the directory where the data file is located
getwd() # get the current working directory
WHO = read.csv("WHO.csv") # load the data in csv file into a variable WHO
# two very useful commands for looking at our data - str, summary
str(WHO) # gives the structure of our data
# data type Factor means that variables have several different categories or levels
# two types of numerical values - integers and num
summary(WHO) # gives a numeric summary of each of our variables
# for variables of type Factor, it lists the number of observations in each category/level
# for numerical variables, it lists Min, 1s Qu., Median, Mean, 3rd Qu., Max., (NA's)
# subsetting data - subset(dataframe, variable == category)
WHO_Europe = subset(WHO, Region == "Europe")
str(WHO_Europe)
# writing a data frame to a csv file - write.csv(dataframe, "filename.csv")
write.csv(WHO_Europe, "WHO_Europe.csv")
# removing a dataframe from our current session - useful if you're working with a large data set that's taking up a lot of space
rm(WHO_Europe)
######### Data Analysis - Summary statistics and Scatterplots
# To access a variable in a data frame, you will always have to link it to the data frame it belongs to with the dollar sign
Under15 # returns an error - Under15 not found
WHO$Under15 # returns the Under15 vector of the data frame WHO
# mean
mean(WHO$Under15)
# standard deviation
sd(WHO$Under15)
# we can apply the summary function on a variable too
summary(WHO$Under15)
# to see which observation in Under15 has the min value,
which.min(WHO$Under15) # returns the row number of the observation with the minimum value of Under15. In our case, returns 86
WHO$Country[86] # to see which country is observation 86
# to see which observation in Under15 has the min value,
which.max(WHO$Under15)
WHO$Country[124]
# A scatter plot of GNI vs fertility rate - plot(x-axis, y-axis)
plot(WHO$GNI, WHO$FertilityRate)
# Let's use the subset function to identify the countries with a GNI > 10,000 and fertility rate > 2.5
Outliers = subset(WHO, GNI>10000 & FertilityRate>2.5) # note the & symbol
# to see the number of rows - nrow(dataframe)
nrow(Outliers)
# let's output just the names, GNI and fertility rates of those 7 countries
Outliers[c("Country", "GNI", "FertilityRate")]
######### Data Analysis - Plots and summary tables
hist(WHO$CellularSubscribers)
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels")
summary(USDA$VitaminC)
summary(USDA$VitaminC, xlim=c(0,100))
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100))
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=100)
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000)
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", breaks=2000)
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000)
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000, col=colors)
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000, col="blue")
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000, col="red")
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000, col="green")
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000, col="yellow")
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000, col="purple")
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000, col="orange")
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000, col="white")
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000, col="orange")
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000, col="violet")
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000, col="cyan")
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000, col="pink")
hist(USDA$VitaminC, xlab="Vitamin C (mg)", main="Histogram of Vitamin C levels", xlim=c(0,100), breaks=2000, col=c("red", "blue", "green", "orange","pink"))
names(USDA)
hist(USDA$Sugar)
hist(USDA$Sugar, xlim=c(0,60), breaks=100)
hist(USDA$Iron)
hist(USDA$Potassium)
hist(USDA$Calories)
hist(USDA$Calories, col=c("red", "blue", "green", "yellow", "pink", "violet"))
rainbow = c("violet", "indigo", "blue", "green", "yellow", "orange", "red")
hist(USDA$Calories, col=rainbow
)
rainbow = c("violet", "blue4", "blue", "green", "yellow", "orange", "red")
hist(USDA$Calories, col=rainbow)
max(USDA$VitaminC)
max(USDA$VitaminC, na.rm=TRUE)
hist(USDA$VitaminC)
str(HighSodium)
hist(USDA$VitaminC, xlim=c(0,100), breaks=2000)
hist(USDA$VitaminC, xlim=c(0,100), breaks=20)
hist(USDA$VitaminC, xlim=c(0,100), breaks=200)
hist(USDA$Calories, col=rainbow)
hist(USDA$Calories, col=rainbow, xlim=(0,100))
hist(USDA$Calories, col=rainbow, xlim=c(0,100))
boxplot(USDA$Sugar)
HighSodium = USDA$Sodium > mean(USDA$Sodium)
summary(HighSodium)
head(HighSodium)
table(HighSodium)
str(HighSodium)
summary(HighSodium)
HighSodium = USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE)
summary(HighSodium)
HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE))
summary(HighSodium)
str(HighSodium)
USDA$HighSodium = HighSodium
names(USDA)
head(USDA)
HighProtein = as.numeric(USDA$Protein > mean(USDA$Protein, na.rm=TRUE))
HighCarbs = as.numeric(USDA$Carbohydrate > mean(USDA$Carbohydrate, na.rm=TRUE))
HighFat = as.numeric(USDA$TotalFat > mean(USDA$TotalFat, na.rm=TRUE))
str(USDA)
USDA$HighProtein = HighProtein
USDA$HighCarbs = HighCarbs
USDA$HighFat = HighFat
str(USDA)
table(USDA$HighCarbs)
table(USDA$HighSodium)
table(USDA$HighSodium, USDA$HighFat)
tapply(USDA$Iron, USDA$HighProtein ,mean)
tapply(USDA$Iron, USDA$HighProtein ,mean, na.rm=TRUE)
tapply(USDA$VitaminC, USA$HighCarbs, max, na.rm=TRUE)
tapply(USDA$VitaminC, USDA$HighCarbs, max, na.rm=TRUE)
poll = read.csv("AnonymityPoll.csv")
names(poll)
str(poll)
table(poll$Smartphone)
sum(is.na(poll$Smartphone))
table(poll$Smartphone)
sum(is.na(poll$Smartphone))
472+487+43
table(poll$Sex, poll$Region)
table(poll$State, poll$Region)
tapply(poll$State, poll$Region, max, na.ram=TRUE)
MidwestInterviewees = subset(poll, Region=="Midwest")
table(MidwestInterviewees$State)
SouthInterviewees = subset(poll, Region=="South")
table(SouthInterviewees$State)
max(table(SouthInterviewees$State))
table(poll$Internet.Use, poll$Smartphone)
sum(is.na(poll$Internet.Use))
sum(is.na(poll$Smartphone))
limited = subset(poll, Internet.use == 1 | Smarphone == 1)
limited = subset(poll, Internet.Use == 1 | Smarphone == 1)
limited = subset(poll, Internet.Use == 1 | Smartphone == 1)
str(limited)
limited$Internet.Use + limited$Smartphone
1+NA
str(limited)
nrow(limited)
is.na(limited)
str(limited)
is.na(limited$Age)
str(limited)
summary(limited)
summary(limited)
mean(limited$Info.On.Internet)
table(limited$Info.On.Internet)
table(limited$Worry.About.Info)
386/(404+386)
table(limited$Anonymity.Possible)
278/(475+278)
table(limited$Tried.Masking.Identity)
128/(656+128)
table(limited$Privacy.Laws.Effective)
186/(541+186)
hist(limited$Age)
plot(limited$Age, limited$Info.On.Internet)
table(limited$Age, limited$Info.On.Internet)
max(table(limited$Age, limited$Info.On.Internet))
jitter(c(1, 2, 3))
jitter(c(1, 2, 3))
plot(jitter(limited$Age), jitter(limited$Info.On.Internet))
tapply(limited$Info.On.Internet, limited$Smartphone, summary)
tapply(limited$Tried.Masking.Identity, limited$Smartphone, table)
93/(390+93)
33/(248+33)
jitter(c(1, 2, 3))
